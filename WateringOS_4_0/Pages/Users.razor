@page "/users"
@namespace WateringOS_4_0.Pages

@using System.Threading
@using WateringOS_4_0.Loggers
@inject ProtectedSessionStorage SessionStorage
@inject Services.AccountService AccountService
@inject NavigationManager NavigationManager
@implements IDisposable


<h2>User List</h2>
<h4>Below a list of currently logged in users.</h4>
<table class="table">
    <thead>
        <tr>
            <th>Fingerprint</th>
            <th>HashCode</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var userid in AccountService.ApprovedUsers)
        {
            <tr>
                <td>@userid.Fingerprint</td>
                <td>@userid.HashCode</td>
            </tr>
        }
    </tbody>
</table>


@code {

    protected override async Task OnInitializedAsync()
    {
        var result = await SessionStorage.GetAsync<string>("fingerprint");

        if (AccountService.IsAuthorized(result.Value))
        {
            Logger.Post(Logger.WEB, LogType.Information, "User "+result.Value+" entered ADMIN page -Users-", "New user logged in with administrator level.");
            await Task.Run(delegate { AccountService.AccountLogin += OnUserLogin; });
            await Task.Run(delegate { AccountService.AccountLogout += OnUserLogout; });
        }
        else
        {
            Logger.Post(Logger.WEB, LogType.Information, "User "+result.Value+" needs to authenticate", "A user wants to access admin level page (Users).");
            var returnUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
            NavigationManager.NavigateTo("/auth/login?returnUrl=" + returnUrl);
        }
    }

    public void Dispose()
    {
        AccountService.AccountLogin -= OnUserLogin;
        AccountService.AccountLogout -= OnUserLogout;
    }

    private void OnUserLogin() { InvokeAsync(() => StateHasChanged()); }
    private void OnUserLogout() { InvokeAsync(() => StateHasChanged()); }
}

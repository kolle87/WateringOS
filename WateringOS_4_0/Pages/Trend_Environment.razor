@page "/trend_environment"
@namespace WateringOS_4_0.Pages

@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor
@using WateringOS_4_0.Models
@using System.Collections.ObjectModel

@inject Services.EnvironmentService EnvironmentService

<div class="control-section" style="height:100%">
    <div class="row" style="margin-bottom:1.5em">
        <div class="col">
            <h2>Environment</h2>
        </div>
        <div class="col-auto">
            <button class=@ButtonClassWeek @onclick="ShowWeek" style="width: 100px; margin-right:20px">Week</button>
            <button class=@ButtonClassDay @onclick="ShowDay" style="width: 100px">24hrs</button>
        </div>
    </div>
    <SfChart Width="100%" Height="100%">

        <ChartArea>
            <ChartAreaBorder Width="0" />
        </ChartArea>

        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" LabelIntersectAction="LabelIntersectAction.Rotate45" IntervalType=@AxisIntType LabelFormat=@AxisFormat Interval=@AxisInterval Minimum=@MinX MinorTicksPerInterval="3" EdgeLabelPlacement="EdgeLabelPlacement.Shift">
            <ChartAxisMajorGridLines Width="1" Color="darkgrey" />
            <ChartAxisMinorGridLines Width="1" Color="lightgrey" />
        </ChartPrimaryXAxis>

        <ChartPrimaryYAxis LabelFormat="{value}" RangePadding="ChartRangePadding.None" Minimum="0" Maximum="2" Interval="1" Title="Rain/Ground">
            <ChartAxisMajorGridLines Width="1" Color="darkgrey" />
            <ChartAxisMinorGridLines Width="1" Color="lightgrey" />
        </ChartPrimaryYAxis>

        <ChartRows>
            <ChartRow Height="20%" />
            <ChartRow Height="5%" />
            <ChartRow Height="75%" />
        </ChartRows>

        <ChartAxes>
            <ChartAxis Minimum="-10" Maximum="80" Interval="10" OpposedPosition="false" RowIndex="2" Name="TempAxis" LabelFormat="{value}°C" Title="Temperature" />
        </ChartAxes>

        <ChartCrosshairSettings Enable="true" LineType="LineType.Vertical" />
        <ChartTooltipSettings Enable="true" Shared="true" Header="${point.x}" Format="${series.name} : ${point.y}" />

        <ChartSeriesCollection>
            <ChartSeries DataSource="@EnvironmentService.EnvironmentLog" YAxisName="TempAxis" Name="Ambient" XName="@nameof(EnvironmentModel.TimeStamp)" YName="@nameof(EnvironmentModel.TempAmb)" Opacity="1" Type="ChartSeriesType.Line" Fill="#007bff"><ChartSeriesBorder Width="2" Color="#0D47A1" /></ChartSeries>
            <ChartSeries DataSource="@EnvironmentService.EnvironmentLog" YAxisName="TempAxis" Name="Exposed" XName="@nameof(EnvironmentModel.TimeStamp)" YName="@nameof(EnvironmentModel.TempExp)" Opacity="1" Type="ChartSeriesType.Line" Fill="#2E7D32"><ChartSeriesBorder Width="2" Color="#1B5E20" /></ChartSeries>
            <ChartSeries DataSource="@EnvironmentService.EnvironmentLog" YAxisName="TempAxis" Name="CPU" XName="@nameof(EnvironmentModel.TimeStamp)" YName="@nameof(EnvironmentModel.TempCPU)" Opacity="1" Type="ChartSeriesType.Line" Fill="#FF8F00"><ChartSeriesBorder Width="2" Color="#CC3300" /></ChartSeries>
            <ChartSeries DataSource="@EnvironmentService.EnvironmentLog" YAxisName="TempAxis" Name="PCB" XName="@nameof(EnvironmentModel.TimeStamp)" YName="@nameof(EnvironmentModel.TempPCB)" Opacity="1" Type="ChartSeriesType.Line" Fill="#7B1FA2"><ChartSeriesBorder Width="2" Color="#330099" /></ChartSeries>

            <ChartSeries DataSource="@EnvironmentService.EnvironmentLog" Name="Rain" XName="@nameof(EnvironmentModel.TimeStamp)" YName="@nameof(EnvironmentModel.Rain)" Opacity="0.7" Type="ChartSeriesType.Area" Fill="#007bff"><ChartSeriesBorder Width="2" Color="#0D47A1" /></ChartSeries>
            <ChartSeries DataSource="@EnvironmentService.EnvironmentLog" Name="Ground" XName="@nameof(EnvironmentModel.TimeStamp)" YName="@nameof(EnvironmentModel.Ground)" Opacity="0.7" Type="ChartSeriesType.Area" Fill="#2E7D32"><ChartSeriesBorder Width="2" Color="#1B5E20" /></ChartSeries>

        </ChartSeriesCollection>

        <ChartLegendSettings Visible="true" />

    </SfChart>

</div>

<style>
    .content {
        height: calc(100% - 220px);
    }

    .e-control {
        height: 100%;
    }
</style>

@code{

    private DateTime MinX = DateTime.Now.AddDays(-7);
    private DateTime MaxX = DateTime.Now;

    private string AxisFormat = "dd/MMM";
    private int AxisInterval = 1;
    private IntervalType AxisIntType = IntervalType.Days;

    private string ButtonClassWeek = "btn btn-primary";
    private string ButtonClassDay = "btn btn-outline-primary";

    protected override async Task OnInitializedAsync()
    {
        EnvironmentService.LoadEnvironmentLog();
        MinX = GetDayRounded(EnvironmentService.EnvironmentLog.Last().TimeStamp.AddDays(-7));
        MaxX = GetDayEndRounded(EnvironmentService.EnvironmentLog.Last().TimeStamp);
    }

    private void ShowWeek()
    {
        MinX = GetDayRounded(EnvironmentService.EnvironmentLog.Last().TimeStamp.AddDays(-7));
        AxisFormat = "dd/MMM";
        AxisInterval = 1;
        AxisIntType = IntervalType.Days;
        ButtonClassWeek = "btn btn-primary";
        ButtonClassDay = "btn btn-outline-primary";
    }

    private void ShowDay()
    {
        MinX = GetHourRounded(EnvironmentService.EnvironmentLog.Last().TimeStamp.AddHours(-24));
        AxisFormat = "HH:mm";
        AxisInterval = 1;
        AxisIntType = IntervalType.Hours;
        ButtonClassWeek = "btn btn-outline-primary";
        ButtonClassDay = "btn btn-primary";
    }

    private DateTime GetHourRounded(DateTime TimeStamp)
    {
        return new DateTime(TimeStamp.Year, TimeStamp.Month, TimeStamp.Day, TimeStamp.Hour, 0, 0);
    }

    private DateTime GetDayRounded(DateTime TimeStamp)
    {
        return new DateTime(TimeStamp.Year, TimeStamp.Month, TimeStamp.Day, 0, 0, 0);
    }

    private DateTime GetDayEndRounded(DateTime TimeStamp)
    {
        return new DateTime(TimeStamp.Year, TimeStamp.Month, TimeStamp.Day, 23, 59, 59);
    }

}
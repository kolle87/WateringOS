@namespace WateringOS_4_0.Pages

@implements IDisposable

@using Syncfusion.Blazor.CircularGauge
@using WateringOS_4_0.Models

<div class="control-section" id="target" style="padding-top:2em;width:100%;height:100%">
    <SfCircularGauge Height="95%">
        <CircularGaugeAxes>
            <CircularGaugeAxis StartAngle="200" EndAngle="160" Minimum="0" Maximum="100" Radius="100%">
                <CircularGaugeAxisLineStyle Width="0.01" />
                <CircularGaugeAxisLabelStyle Position="Position.Inside" UseRangeColor="true">
                    <CircularGaugeAxisLabelFont Size="0px" Color="transparent" />
                </CircularGaugeAxisLabelStyle>
                <CircularGaugeAxisMajorTicks Height="0.01" />
                <CircularGaugeAxisMinorTicks Height="0.01" />
                <CircularGaugeRanges>
                    <CircularGaugeRange Start="0" End="100" Radius="100%" StartWidth="30" EndWidth="30" Color="#E0E0E0" RoundedCornerRadius="20" />
                </CircularGaugeRanges>
                <CircularGaugePointers>
                    <CircularGaugePointer Value="@RecentValues.LevelInPercent" RoundedCornerRadius="20" Type="PointerType.RangeBar" Radius="100%" Color="@PointerColor" PointerWidth="30">
                        <CircularGaugePointerAnimation Enable="false" />
                        <CircularGaugePointerBorder Color="grey" Width="0.01" />
                    </CircularGaugePointer>
                </CircularGaugePointers>
                <CircularGaugeAnnotations>
                    <CircularGaugeAnnotation Radius="0%" Angle="0" ZIndex="1">
                        <ContentTemplate>
                            <div class="annotationText">@ValuePercentText</div>
                            <div class="annotationSubText">@ValueLiterText</div>
                        </ContentTemplate>
                    </CircularGaugeAnnotation>
                </CircularGaugeAnnotations>
            </CircularGaugeAxis>
        </CircularGaugeAxes>
    </SfCircularGauge>

    <h4 style="position:absolute; top:5px; left:20px">Tank Level</h4>
</div>

<style>

    .annotationText {
        font-size: 1.8em;
        width: 120px;
        text-align: center;
        margin-top: -30px;
        margin-left: -55px
    }

    .annotationSubText {
        font-size: 1.5em;
        width: 120px;
        text-align: center;
        margin-top: -10px;
        margin-left: -55px
    }
</style>

@code {
    private string PointerColor = "#038c9a";
    private string ValuePercentText = RecentValues.LevelInPercent.ToString() + "%";
    private string ValueLiterText = RecentValues.LevelInLiter.ToString() + " l";

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(delegate { Globals.GUI.HasChanged_slow += Update; });
    }  

    private void Update()
    {
        int MinTankLevel = Globals.SystemSettings.FirstOrDefault(x => x.Name == "ALM_TankLevel").Value;

        if (RecentValues.LevelInPercent <= MinTankLevel) { PointerColor = "#ea501a"; }
        else { PointerColor = "#038c9a"; }

        ValuePercentText = RecentValues.LevelInPercent.ToString() + "%";
        ValueLiterText = RecentValues.LevelInLiter.ToString() + " l";

        InvokeAsync(() => { StateHasChanged(); });
    }

    public void Dispose()
    {
        Globals.GUI.HasChanged_slow -= Update;
    }
}
